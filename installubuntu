#!/bin/bash

# reset shell colors
tput init

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Verificar se est√° rodando como root
if [[ $EUID -ne 0 ]]; then
   echo "Este script deve ser executado como root (sudo)"
   exit 1
fi

# Verificar vers√£o do Ubuntu
UBUNTU_VERSION=$(lsb_release -rs)
if [[ "$UBUNTU_VERSION" != "22.04" ]]; then
   echo "Aviso: Este script foi otimizado para Ubuntu 22.04. Vers√£o detectada: $UBUNTU_VERSION"
   read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
   echo
   if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
   fi
fi

# required imports
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# user configs file
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=
mysql_root_password=
db_pass=${db_pass}
EOF
fi

# this file has passwords
chown root:root "${PROJECT_ROOT}"/config
chmod 700 "${PROJECT_ROOT}"/config
source "${PROJECT_ROOT}"/config

# Verifica√ß√µes pr√©-instala√ß√£o
echo "üîç Verificando sistema..."

# Verificar se o sistema est√° atualizado
if ! apt list --upgradable 2>/dev/null | grep -q .; then
   echo "‚úÖ Sistema est√° atualizado"
else
   echo "‚ö†Ô∏è  Sistema precisa de atualiza√ß√µes. Atualizando..."
   apt update && apt upgrade -y
fi

# Verificar se o usu√°rio deploy j√° existe e remover se necess√°rio
if id "deploy" &>/dev/null; then
   echo "‚ö†Ô∏è  Usu√°rio deploy j√° existe. Removendo..."
   userdel -r deploy 2>/dev/null || true
fi

# Verificar e criar grupo sudo se necess√°rio
if ! getent group sudo > /dev/null 2>&1; then
   echo "‚ö†Ô∏è  Grupo sudo n√£o encontrado. Criando..."
   groupadd sudo
fi

# interactive CLI
inquiry_options

# dependencies related
system_update
system_node_install
system_pm2_install
system_docker_install
system_puppeteer_dependencies
system_snapd_install
system_nginx_install
system_certbot_install

# system config
system_create_user

# backend related
system_git_clone
backend_set_env
backend_redis_create
backend_node_dependencies
backend_node_build
backend_db_migrate
backend_db_seed
backend_start_pm2
backend_nginx_setup

# frontend related
frontend_set_env
frontend_node_dependencies
frontend_node_build
frontend_start_pm2
frontend_nginx_setup

# network related
system_nginx_conf
system_nginx_restart
system_certbot_setup

echo "‚úÖ Instala√ß√£o conclu√≠da com sucesso!"
echo "üîó Acesse seu sistema em: ${frontend_url}" 